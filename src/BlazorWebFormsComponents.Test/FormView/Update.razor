@inherits TestComponentBase

<Fixture Test="FirstTest">
	<ComponentUnderTest>
		<FormView AllowPaging="true"
							DataKeyNames="Id"
							OnPageIndexChanging="WidgetFormView_PageIndexChanging"
							OnItemUpdating="FormUpdating"
							OnItemUpdated="FormUpdated"
							ModeChanging="FormModeChanging"
							runat="server"
							Items="Widget.SimpleWidgetList"
							ItemType="Widget"
							Context="Item">
			<ItemTemplate>

				<table id="theItemTemplate">
					<tr>
						<td>@Item.Name</td><td>@Item.Price.ToString("C")</td><td>@Item.Id</td>
					</tr>
					<tr>
						<td><Button CommandName="Edit" Text="Edit" /></td>
					</tr>
				</table>

			</ItemTemplate>
			<EditItemTemplate>
				<label>@Item.Name</label>
				<Button CommandName="Update" Text="Update" />
			</EditItemTemplate>

		</FormView>
	</ComponentUnderTest>
</Fixture>


@code {


	bool raisedModeChangeEvent = false;
	bool raisedItemUpdatingEvent = false;
	bool raisedItemUpdatedEvent = false;

	void FirstTest(Fixture fixture)
	{

		var cut = fixture.GetComponentUnderTest();

		var editButton = cut.Find("button");
		editButton.Click();

		var updateButton = cut.Find("button");
		updateButton.Click();

		raisedModeChangeEvent.ShouldBeTrue("Did not raise ModeChange event");
		raisedItemUpdatingEvent.ShouldBeTrue("Did not raise the ItemUpdating event");
		raisedItemUpdatedEvent.ShouldBeTrue("Did not raise the ItemUpdated event");
		cut.Find("#theItemTemplate").ShouldNotBeNull("Didn't change back to read-only mode");

	}

	void WidgetFormView_PageIndexChanging()
	{

	}

	void FormModeChanging(FormViewModeEventArgs args) {

		raisedModeChangeEvent = args.NewMode == BlazorWebFormsComponents.Enums.FormViewMode.ReadOnly;

	}

	void FormUpdating(FormViewUpdateEventArgs args) {
		raisedItemUpdatingEvent = true;
	}

	void FormUpdated(FormViewUpdatedEventArgs args) {
		raisedItemUpdatedEvent = true;
	}


}

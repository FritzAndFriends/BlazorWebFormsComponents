@inherits TestComponentBase
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorWebFormsComponents.LoginControls;
@using Moq;

<Fixture Test="LoggingInTest">
	<ComponentUnderTest>
		<BlazorWebFormsComponents.LoginControls.Login @ref="loginControl" ID="loginControl" OnLoggingIn="Login_LoggingIn" />
	</ComponentUnderTest>
</Fixture>


@code {
	Login loginControl = new Login();
	bool isLoginCanceled = false;

	void LoggingInTest()
	{
		var principal = new ClaimsPrincipal();
		var identity = new ClaimsIdentity(new Claim[] { new Claim(ClaimTypes.Name, "James Bond") }, "Test authentication");
		principal.AddIdentity(identity);

		var authenticationStateProviderMock = new Mock<AuthenticationStateProvider>();
		authenticationStateProviderMock.Setup(x => x.GetAuthenticationStateAsync()).Returns(Task.FromResult(new AuthenticationState(principal)));

		Services.AddSingleton<AuthenticationStateProvider>(authenticationStateProviderMock.Object);

		var navigationManagerMock = new Mock<NavigationManager>();
		Services.AddSingleton<NavigationManager>(navigationManagerMock.Object);

		var cut = GetComponentUnderTest();

		cut.Find("#loginControl_UserName").Change("admin");
		cut.Find("#loginControl_Password").Change("Fake Password");
		cut.Find("form").Submit();
		isLoginCanceled.ShouldBeTrue();

		cut.Find("#loginControl_UserName").Change("admin");
		cut.Find("#loginControl_Password").Change("SecRet P@ssw0rd");
		cut.Find("form").Submit();
		isLoginCanceled.ShouldBeFalse();
	}

	void Login_LoggingIn(LoginCancelEventArgs args)
	{
		if(loginControl.UserName == "admin" && loginControl.Password == "SecRet P@ssw0rd")
		{
			isLoginCanceled = args.Cancel = false;
		}
		else
		{
			isLoginCanceled = args.Cancel = true;
		}
	}

}

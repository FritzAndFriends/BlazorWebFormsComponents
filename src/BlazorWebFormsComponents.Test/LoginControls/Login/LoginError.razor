@inherits TestComponentBase
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorWebFormsComponents.LoginControls;
@using Moq;

<Fixture Test="LoginErrorTest">
	<ComponentUnderTest>
		<BlazorWebFormsComponents.LoginControls.Login @ref="loginControl" OnLoggedIn=@Login_LoggedIn ID="TestLoggedIn" OnAuthenticate=@AuthenticateError />
	</ComponentUnderTest>
</Fixture>


@code {
	Login loginControl = new Login();
	bool isLogginError = false;
	bool failedAuthentication = false;

	void Login_LoggedIn(EventArgs args)
	{
		isLogginError = true;
	}
	void AuthenticateError(AuthenticateEventArgs args)
	{
		args.Authenticated = false;
		failedAuthentication = true;
	}
}

@code{
	void LoginErrorTest()
	{
		var principal = new ClaimsPrincipal();
		var identity = new ClaimsIdentity(new Claim[] { new Claim(ClaimTypes.Name, "James Bond") }, "Test authentication");
		principal.AddIdentity(identity);

		var authenticationStateProviderMock = new Mock<AuthenticationStateProvider>();
		authenticationStateProviderMock.Setup(x => x.GetAuthenticationStateAsync()).Returns(Task.FromResult(new AuthenticationState(principal)));

		Services.AddSingleton<AuthenticationStateProvider>(authenticationStateProviderMock.Object);

		var navigationManagerMock = new Mock<NavigationManager>();
		Services.AddSingleton<NavigationManager>(navigationManagerMock.Object);

		var cut = GetComponentUnderTest();
		cut.Find("#TestLoggedIn_UserName").Change("James Bond");
		cut.Find("#TestLoggedIn_Password").Change("Squirrels");
		cut.Find("form").Submit();

		isLogginError.ShouldBeFalse();
		failedAuthentication.ShouldBeTrue();
	}
}

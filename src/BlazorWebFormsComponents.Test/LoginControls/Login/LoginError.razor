@inherits TestComponentBase
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorWebFormsComponents.LoginControls;
@using Moq;

<Fixture Test="LoginErrorTest">
	<ComponentUnderTest>
		<BlazorWebFormsComponents.LoginControls.Login @ref="loginControl" ID="loginControl" OnLoginError="Login_LoginError" OnAuthenticate="Login_Authenticate" />
	</ComponentUnderTest>
</Fixture>


@code {
	Login loginControl = new Login();
	bool isLoginError = false;

	void LoginErrorTest()
	{
		var principal = new ClaimsPrincipal();
		var identity = new ClaimsIdentity(new Claim[] { new Claim(ClaimTypes.Name, "James Bond") }, "Test authentication");
		principal.AddIdentity(identity);

		var authenticationStateProviderMock = new Mock<AuthenticationStateProvider>();
		authenticationStateProviderMock.Setup(x => x.GetAuthenticationStateAsync()).Returns(Task.FromResult(new AuthenticationState(principal)));

		Services.AddSingleton<AuthenticationStateProvider>(authenticationStateProviderMock.Object);

		var navigationManagerMock = new Mock<NavigationManager>();
		Services.AddSingleton<NavigationManager>(navigationManagerMock.Object);

		var cut = GetComponentUnderTest();

		cut.Find("#loginControl_UserName").Change(Credential.InvalidCredential.Username);
		cut.Find("#loginControl_Password").Change(Credential.InvalidCredential.Password);
		cut.Find("form").Submit();
		isLoginError.ShouldBeTrue();
	}

	void Login_LoginError(EventArgs args)
	{
		isLoginError = true;
	}

	void Login_Authenticate(AuthenticateEventArgs args)
	{
			args.Authenticated = false;
	}

}

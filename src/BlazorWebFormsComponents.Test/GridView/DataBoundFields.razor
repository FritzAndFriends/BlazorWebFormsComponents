@inherits TestComponentBase

<Fixture Test="FirstTest">
	<ComponentUnderTest>
		<GridView ItemType="Widget"
							AutogenerateColumns="false"
							SelectMethod="GetWidgets">
			<Columns>
				<BoundField ItemType="Widget" DataField="Id" HeaderText="ID" />
				<BoundField ItemType="Widget" DataField="Name" HeaderText="Widget Name" />
			</Columns>
		</GridView>
	</ComponentUnderTest>
</Fixture>


@code {
	void FirstTest(Fixture fixture)
	{
		var cut = fixture.GetComponentUnderTest();
		var tableHeaders = cut.FindAll("th");
		tableHeaders[0].TextContent.ShouldBe("ID");
		tableHeaders[1].TextContent.ShouldBe("Widget Name");
		tableHeaders.Count.ShouldBe(2, "Did not render 2 TH elements");
		cut.FindAll("tr").Count(e => e.InnerHtml.Contains("td")).ShouldBe(Widget.SimpleWidgetList.Length, $"Did not render {Widget.SimpleWidgetList.Length} TR elements");
		cut.FindAll("td").Count().ShouldBe(Widget.SimpleWidgetList.Length*2, $"Did not render {Widget.SimpleWidgetList.Length*2} TD elements");
	}

	IQueryable<Widget> GetWidgets(int maxRows, int startRowIndex, string sortByExpression, out int totalRowCount)
	{
		totalRowCount = Widget.SimpleWidgetList.Length;
		return Widget.SimpleWidgetList.AsQueryable();
	}
}

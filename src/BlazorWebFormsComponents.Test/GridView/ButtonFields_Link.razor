@inherits TestComponentBase
@using BlazorWebFormsComponents.Enums

<Fixture Test="RendersButton">
	<ComponentUnderTest>
		<GridView SelectMethod="GetWidgets"
							AutoGenerateColumns="false"
							ItemType="SharedSampleObjects.Models.Widget">
			<Columns>
				<BoundField ItemType="SharedSampleObjects.Models.Widget"
										DataField="Id" />
				<ButtonField ItemType="SharedSampleObjects.Models.Widget"
										 ImageUrl="http://bing.com"
										 ButtonType="ButtonType.Link"
										 CommandName="PriceCommand"
										 DataTextField="Price"
										 DataTextFormatString="{0:c}"
										 HeaderText="Price" />
			</Columns>
		</GridView>
	</ComponentUnderTest>
</Fixture>


<Fixture Test="ButtonHandlesCommand">
	<ComponentUnderTest>
		<GridView SelectMethod="GetWidgets"
							AutoGenerateColumns="false"
							OnRowCommand="RowCommand"
							ItemType="SharedSampleObjects.Models.Widget">
			<Columns>
				<BoundField ItemType="SharedSampleObjects.Models.Widget"
										DataField="Id" />
				<ButtonField ItemType="SharedSampleObjects.Models.Widget"
										 ImageUrl="http://bing.com"
										 ButtonType="ButtonType.Link"
										 CommandName="PriceCommand"
										 DataTextField="Price"
										 DataTextFormatString="{0:c}"
										 HeaderText="Price" />
			</Columns>
		</GridView>
	</ComponentUnderTest>
</Fixture>



@code {

	void RendersButton(Fixture fixture)
	{
		var cut = fixture.GetComponentUnderTest();
		System.Diagnostics.Debug.Write(cut.Markup);
		var tableHeaders = cut.FindAll("th");
		tableHeaders[1].TextContent.ShouldBe("Price");
		tableHeaders.Count.ShouldBe(2, "Did not render 2 TH element");

		var rows = cut.FindAll("tr");
		rows.Count(e => e.InnerHtml.Contains("td")).ShouldBe(Widget.SimpleWidgetList.Length, $"Did not render {Widget.SimpleWidgetList.Length} TR elements");

		cut.FindAll("a").Count().ShouldBe(Widget.SimpleWidgetList.Length, $"Rendered wrong number of price anchors");

		// inspect the button tags
		foreach (var r in rows.Where(r => r.InnerHtml.Contains("td")))
		{

			r.ChildNodes.Count().ShouldBe(2);

		}

	}


	IQueryable<Widget> GetWidgets(int maxRows, int startRowIndex, string sortByExpression, out int totalRowCount)
	{
		totalRowCount = Widget.SimpleWidgetList.Length;
		return Widget.SimpleWidgetList.AsQueryable();
	}


	GridViewCommandEventArgs argsSet = null;

	void ButtonHandlesCommand(Fixture fixture) {

		var cut = fixture.GetComponentUnderTest();
		System.Diagnostics.Debug.Write(cut.Markup);
		var firstButton = cut.Find("a");
		firstButton.Click();

		argsSet.ShouldNotBeNull();
		argsSet.CommandArgument.ShouldBe(0);
		argsSet.CommandName.ShouldBe("PriceCommand");


	}

	void RowCommand(GridViewCommandEventArgs args) {

		argsSet = args;

	}

}

@inherits TestComponentBase

<Fixture Test="FirstTest">
	<ComponentUnderTest>
		<GridView ItemType="Widget"
							SelectMethod="GetWidgets"
							AutogenerateColumns="true">
		</GridView>
	</ComponentUnderTest>
</Fixture>

<Fixture Test="SecondTest">
	<ComponentUnderTest>
		<GridView ItemType="Person" DataSource="people" AutogenerateColumns="true">
		</GridView>
	</ComponentUnderTest>
</Fixture>

@code {
	IEnumerable<Person> people = null;

	void FirstTest(Fixture fixture)
	{
		var cut = fixture.GetComponentUnderTest();
		var tableHeaders = cut.FindAll("th");
		tableHeaders.Count.ShouldBe(4, "Did not render 4 TH elements");
		tableHeaders[0].TextContent.ShouldBe("Id");
		tableHeaders[1].TextContent.ShouldBe("Name");
		tableHeaders[2].TextContent.ShouldBe("Price");
		tableHeaders[3].TextContent.ShouldBe("LastUpdate");
	}

	void SecondTest(Fixture fixture)
	{
		people = GetPeople();

		var cut = fixture.GetComponentUnderTest();
		var tableHeaders = cut.FindAll("th");
		tableHeaders[0].TextContent.ShouldBe("FirstName");
		tableHeaders[1].TextContent.ShouldBe("LastName");
		tableHeaders.Count.ShouldBe(2, "Did not render 2 TH elements");
	}

	IQueryable<Widget> GetWidgets(int maxRows, int startRowIndex, string sortByExpression, out int totalRowCount)
	{
		totalRowCount = Widget.SimpleWidgetList.Length;
		return Widget.SimpleWidgetList.AsQueryable();
	}

	IEnumerable<Person> GetPeople()
		=> new List<Person>
		{
			new Person { FirstName = "Jeff", LastName = "Fritz" },
			new Person { FirstName = "Hisham", LastName = "Bin Ateya" }
		};

	class Person
	{
		private int _id;

		private int Id { get => _id; set => _id = value; }

		public string FirstName { get; set; }

		public string LastName { get; set; }

		public Person this[int id] => null;

		public Person this[string name] => null;

		public static int Count { get; }
	}
}

@inherits BaseModelBindingComponent<ItemType>
@typeparam ItemType
@using BlazorWebFormsComponents.Enums

@if (Items != null)
{
	var IndexedItems = ElementIndex(RepeatColumns, Items, RepeatDirection);

	<CascadingValue Name="HeaderStyle" Value="HeaderStyle">
		<CascadingValue Name="FooterStyle" Value="FooterStyle">
			<CascadingValue Name="ItemStyle" Value="ItemStyle">
				<CascadingValue Name="AlternatingItemStyle" Value="AlternatingItemStyle">
					<CascadingValue Name="SeparatorStyle" Value="SeparatorStyle">
						@ChildContent
					</CascadingValue>
				</CascadingValue>
			</CascadingValue>
		</CascadingValue>
	</CascadingValue>

	@switch (RepeatLayout)
	{

		case TableRepeatLayout t:
			<table accesskey="@AccessKey"
						 cellpadding="@(CellPadding == default ? null : (int?)CellPadding)"
						 cellspacing="@(CellSpacing == default ? null : (int?)CellSpacing)"
						 rules="@CalculatedGridLines"
						 style="border-collapse:collapse;@CalculatedStyle"
						 tabindex="@(TabIndex == default ? null : (short?)TabIndex)"
						 title="@ToolTip">
				<tbody>
					@if (HeaderTemplate != null && ShowHeader)
					{
						if (!string.IsNullOrEmpty(Caption))
						{
							<caption align="@(CaptionAlign == VerticalAlign.NotSet ? null : CaptionAlign.ToString())">@Caption</caption>
						}

						<tr>
							@if (UseAccessibleHeader)
							{
								<th style="@HeaderStyle" class="@HeaderStyle.CssClass">@HeaderTemplate</th>
							}
							else
							{
								<td style="@HeaderStyle" class="@HeaderStyle.CssClass">@HeaderTemplate</td>
							}

						</tr>
					}

					@if (Items?.Any() ?? false)
					{
						var first = true;
						OnDataBinding.InvokeAsync(EventArgs.Empty);
						var idx = 1;
						do
						{
							if (!first && SeparatorTemplate != null)
							{
								<tr><td style="@SeparatorStyle">@SeparatorTemplate</td></tr>
							}

							<tr>
								@{
									do
									{
										var item = IndexedItems[idx - 1];
										<CascadingValue Name="CurrentDataBoundItem" Value="item">
											@{
												var even = IndexedItems.IndexOf(item) % 2 == 0;
											}
											<td style="@(even ? ItemStyle : AlternatingItemTemplate == null ? ItemStyle : AlternatingItemStyle)">@(even ? ItemTemplate(item) : AlternatingItemTemplate == null ? ItemTemplate(item) : AlternatingItemTemplate(item))</td>
										</CascadingValue>
										OnItemDataBound.InvokeAsync(new ListViewItemEventArgs(item));
										idx++;
										first = false;
									} while ((idx - 1) % RepeatColumns != 0 && idx <= IndexedItems.Count());
								}
							</tr>

						} while (idx <= IndexedItems.Count());

						OnDataBound.InvokeAsync(EventArgs.Empty);
						@if (FooterTemplate != null && ShowFooter)
						{
							<tr><td style="@FooterStyle" class="@FooterStyle.CssClass">@FooterTemplate</td></tr>
						}
	                }

				</tbody>
			</table>
			break;
		case FlowRepeatLayout f:
			<span accesskey="@AccessKey" style="@CalculatedStyle" title="@ToolTip" tabindex="@(TabIndex == default ? null : (short?)TabIndex)">
				@if (HeaderTemplate != null && ShowHeader)
				{
					<span class="@HeaderStyle.CssClass" style="@HeaderStyle">@HeaderTemplate</span><br />
				}
				@if (Items?.Any() ?? false)
				{
					var first = true;
					OnDataBinding.InvokeAsync(EventArgs.Empty);
					var idx = 1;
					do
					{
						if (!first && SeparatorTemplate != null)
						{
							<span style="@SeparatorStyle">@SeparatorTemplate</span>
						}
						do
						{
							var item = IndexedItems[idx - 1];
							<CascadingValue Name="CurrentDataBoundItem" Value="item">
								@{
									var even = IndexedItems.IndexOf(item) % 2 == 0;
								}
								<span style="@(even ? ItemStyle : AlternatingItemTemplate == null ? ItemStyle : AlternatingItemStyle)">@(even ? ItemTemplate(item) : AlternatingItemTemplate == null ? ItemTemplate(item) : AlternatingItemTemplate(item))</span>
							</CascadingValue>
							OnItemDataBound.InvokeAsync(new ListViewItemEventArgs(item));
							first = false;
							idx++;
						} while ((idx - 1) % RepeatColumns != 0 && idx <= IndexedItems.Count());
						<br />
					} while (idx <= IndexedItems.Count());
					OnDataBound.InvokeAsync(EventArgs.Empty);
				}
				@if (FooterTemplate != null && ShowFooter)
				{
					<span class="@FooterStyle.CssClass" style="@FooterStyle">@FooterTemplate</span>
				}
			</span>
			break;
	}
}
